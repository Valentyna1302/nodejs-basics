Ось кілька загальних властивостей:

perPage - ліміт записів на сторінці. Кількість записів чи обєктів, які повинні бути включені на кожній сторінці

page - номер поточної сторінки, яку переглядає користувач

totalItems - загальна кількість записів чи обєктів в всьому наборі даних

totalPages - загальна кількість сторінок, яка визначається за формулою Math.ceil(totalItems / perPage)

hasPreviousPage - прапор, який вказує, чи є для поточного запиту попередня сторінка

hasNextPage - прапор, який вказує, чи є для поточного запиту наступна сторінка


З клієнта ми будемо передавати параметри perPage та page, що дозволить бекенду віддати ту кількість даних, що відповідає певній сторінці при вказаній кількості ресурсів на сторінку. У відповіді бекенду ми додамо такі властивості як perPage, page, totalItems, totalPages, hasPreviousPage та hasNextPage.


 // Отримуємо параметри пагінації (сторінка і кількість на сторінці) з запиту
  const { page, perPage } = parsePaginationParams(req.query);
Кількість елементів на сторінці. У контексті цього коду йдеться про кількість студентів, які мають бути відображені на кожній сторінці у результатах пагінації. Тобто, параметр perPage вказує, скільки студентів буде на одній сторінці, а параметр page вказує, яку сторінку користувач запитує.

Зазвичай це використовується для поділу великої кількості даних на менші частини (сторінки), щоб зручніше відображати їх на інтерфейсі, наприклад, у веб-додатку.








